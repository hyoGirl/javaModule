工厂模式


不关心过程，只关心结果。

https://blog.csdn.net/wfg18801733667/article/details/60954744

特点：
1：隐藏复杂的逻辑过程，只关心执行结果

重点是DefaultFactory 超级有用


简单工厂：是为了创建同一类产品的不同类型

生成产品类的代码跟客户端代码分离，在工厂类中你可以添加所需的生成产品的逻辑代码，

但是要增加新产品的时候，需要去修改工厂类里面的方法，去增加多重if else判断比较麻烦
采用多个if else来判断，导致整个工厂代码维护困难，

工厂方法：

定义一个创建对象的工厂接口，让子类决定实例化哪一个类，将实际创建工作推迟到子类当中。
按照每一个功能。来单独生成一个工厂，方便解耦。但是需要知道每一个工厂的特性

使用场景：

1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。
2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 
3、设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

创建对象的接口，让子类决定具体实例化的对象，把简单的内部逻辑判断移到了客户端。
工厂方法模式克服了简单工厂所违背的开闭原则的缺点，又保持了封装对象创建过程的优点。扩展性高，
想要增加一个产品，只要扩展一个工厂类就可以。


抽象工厂：


抽象工厂模式是用来创建不同类的产品的。
抽象工厂是围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂。
提供一个创建一系列相关或相互依赖对象的接口，而无需指定他们具体的类。
